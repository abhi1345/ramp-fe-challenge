{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      // Check if the new response is valid and there is existing data to append to\n      if (response === null) {\n        return previousResponse; // Return the existing data if the new fetch fails\n      }\n\n      if (previousResponse === null) {\n        return response; // Set the new data if there was no existing data\n      } // Append new data to the existing data and update the nextPage value\n\n\n      console.log(response.nextPage);\n      return { ...response,\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","console","log","data","invalidateData"],"sources":["/Users/abhisheksharma/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      // Check if the new response is valid and there is existing data to append to\n      if (response === null) {\n        return previousResponse; // Return the existing data if the new fetch fails\n      }\n      if (previousResponse === null) {\n        return response; // Set the new data if there was no existing data\n      }\n      // Append new data to the existing data and update the nextPage value\n      console.log(response.nextPage)\n      return {\n        ...response,\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C;MACA,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOG,gBAAP,CADqB,CACI;MAC1B;;MACD,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOH,QAAP,CAD6B,CACZ;MAClB,CAP4C,CAQ7C;;;MACAI,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACE,QAArB;MACA,OAAO,EACL,GAAGF,QADE;QAELM,IAAI,EAAE,CAAC,GAAGH,gBAAgB,CAACG,IAArB,EAA2B,GAAGN,QAAQ,CAACM,IAAvC,CAFD;QAGLJ,QAAQ,EAAEF,QAAQ,CAACE;MAHd,CAAP;IAKD,CAfuB,CAAxB;EAgBD,CAxB2B,EAwBzB,CAACP,cAAD,EAAiBE,qBAAjB,CAxByB,CAA5B;EA0BA,MAAMU,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDQ;EAAlD,CAAP;AACD;;GArCeb,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}