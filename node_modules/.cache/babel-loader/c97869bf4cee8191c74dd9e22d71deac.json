{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport mockData from \"../mock-data.json\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  console.log(\"newdata\", data.transactions);\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  console.log(\"newdata\", data.transactions);\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport function useCache() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n}\n\n_s(useCache, \"+kJ/qJ1Y85chHuXG+vy3vPrLPvs=\", false, function () {\n  return [useCustomFetch];\n});\n\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n  const employeeId = transaction.employee.id; // If on all employee view, update cache for employee specific view\n  // if on employee view, update cache for all employees\n\n  console.log(\"newdata\", data.transactions);\n};","map":{"version":3,"names":["mockData","useCustomFetch","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","console","log","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","useCache","fetchWithCache","loading","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/abhisheksharma/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n\n  console.log(\"newdata\", data.transactions)\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  console.log(\"newdata\", data.transactions)\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n  \n}\n\nexport function useCache() {\n  const { fetchWithCache, loading } = useCustomFetch()\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n\n  const employeeId = transaction.employee.id\n\n  // If on all employee view, update cache for employee specific view\n\n\n  // if on employee view, update cache for all employees\n\n  \n  console.log(\"newdata\", data.transactions)\n}\n"],"mappings":";;AAQA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEJ,QAAQ,CAACI,SAD+C;EAEnEC,YAAY,EAAEL,QAAQ,CAACK;AAF4C,CAArE;AAMA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAGAM,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,IAAI,CAACE,YAA5B;EAEA,OAAO;IACLQ,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBW,KAAlB,CAAwBN,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CAvBM;AAyBP,OAAO,MAAMM,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIT,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAEDK,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,IAAI,CAACE,YAA5B;EACA,OAAOF,IAAI,CAACE,YAAL,CAAkBc,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AAED,CARM;AAUP,OAAO,SAASK,QAAT,GAAoB;EAAA;;EACzB,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BxB,cAAc,EAAlD;AACD;;GAFesB,Q;UACsBtB,c;;;AAGtC,OAAO,MAAMyB,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAMR,WAAW,GAAGjB,IAAI,CAACE,YAAL,CAAkBwB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACR,EAAnB,KAA0BK,aADhC,CAApB;;EAIA,IAAI,CAACP,WAAL,EAAkB;IAChB,MAAM,IAAIX,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDW,WAAW,CAACW,QAAZ,GAAuBH,KAAvB;EAEA,MAAMV,UAAU,GAAGE,WAAW,CAACC,QAAZ,CAAqBC,EAAxC,CAXsG,CAatG;EAGA;;EAGAR,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,IAAI,CAACE,YAA5B;AACD,CApBM"},"metadata":{},"sourceType":"module"}