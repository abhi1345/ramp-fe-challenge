{"ast":null,"code":"import { useCustomFetch } from \"../hooks/useCustomFetch\";\nimport mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nconst {\n  clearCacheByEndpoint\n} = useCustomFetch();\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  console.log(\"newdata\", data.transactions);\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  console.log(\"newdata\", data.transactions);\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n  console.log(\"newdata\", data.transactions);\n};","map":{"version":3,"names":["useCustomFetch","mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","clearCacheByEndpoint","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","console","log","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/abhisheksharma/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport {useCustomFetch} from \"../hooks/useCustomFetch\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nconst { clearCacheByEndpoint } = useCustomFetch()\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n\n  console.log(\"newdata\", data.transactions)\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  console.log(\"newdata\", data.transactions)\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n  \n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n  console.log(\"newdata\", data.transactions)\n}\n"],"mappings":"AAQA,SAAQA,cAAR,QAA6B,yBAA7B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,MAAM;EAAEC;AAAF,IAA2BN,cAAc,EAA/C;AAEA,OAAO,MAAMO,YAAY,GAAG,MAAkBJ,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMI,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGP,qBAArB;EACA,MAAMU,GAAG,GAAGD,KAAK,GAAGT,qBAApB;;EAEA,IAAIS,KAAK,GAAGR,IAAI,CAACE,YAAL,CAAkBQ,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGT,IAAI,CAACE,YAAL,CAAkBQ,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAGAM,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,IAAI,CAACE,YAA5B;EAEA,OAAO;IACLS,QADK;IAELX,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBY,KAAlB,CAAwBN,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CAvBM;AAyBP,OAAO,MAAMM,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIT,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAEDK,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,IAAI,CAACE,YAA5B;EACA,OAAOF,IAAI,CAACE,YAAL,CAAkBe,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AAED,CARM;AAUP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIX,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDW,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;EACAX,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,IAAI,CAACE,YAA5B;AACD,CAXM"},"metadata":{},"sourceType":"module"}