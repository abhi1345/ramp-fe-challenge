{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const index = data.transactions.findIndex(transaction => transaction.id === transactionId);\n\n  if (index === -1) {\n    throw new Error(\"Invalid transaction to approve\");\n  } // Creating a new object for the updated transaction\n\n\n  const updatedTransaction = { ...data.transactions[index],\n    approved: value\n  }; // Replacing the old transaction with the updated one in a new array\n\n  data.transactions = [...data.transactions.slice(0, index), updatedTransaction, ...data.transactions.slice(index + 1)];\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","index","findIndex","updatedTransaction","approved"],"sources":["/Users/abhisheksharma/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const index = data.transactions.findIndex(\n    (transaction) => transaction.id === transactionId\n  );\n\n  if (index === -1) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  // Creating a new object for the updated transaction\n  const updatedTransaction = { ...data.transactions[index], approved: value };\n\n  // Replacing the old transaction with the updated one in a new array\n  data.transactions = [\n    ...data.transactions.slice(0, index),\n    updatedTransaction,\n    ...data.transactions.slice(index + 1)\n  ];\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAON,IAAI,CAACE,YAAL,CAAkBY,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAMC,KAAK,GAAGrB,IAAI,CAACE,YAAL,CAAkBoB,SAAlB,CACXP,WAAD,IAAiBA,WAAW,CAACE,EAAZ,KAAmBE,aADxB,CAAd;;EAIA,IAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChB,MAAM,IAAIf,KAAJ,CAAU,gCAAV,CAAN;EACD,CAPqG,CAStG;;;EACA,MAAMiB,kBAAkB,GAAG,EAAE,GAAGvB,IAAI,CAACE,YAAL,CAAkBmB,KAAlB,CAAL;IAA+BG,QAAQ,EAAEJ;EAAzC,CAA3B,CAVsG,CAYtG;;EACApB,IAAI,CAACE,YAAL,GAAoB,CAClB,GAAGF,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwB,CAAxB,EAA2BU,KAA3B,CADe,EAElBE,kBAFkB,EAGlB,GAAGvB,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBU,KAAK,GAAG,CAAhC,CAHe,CAApB;AAKD,CAlBM"},"metadata":{},"sourceType":"module"}